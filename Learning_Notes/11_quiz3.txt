Question 1 of 12
What code should come instead of the ??? placeholders to have a function that takes the amount of local currency and a varying number of exchange rates, and prints the value of the currency at each provided exchange rate?
 
def Calc(???):
  for i in rates:
    print(???)

============
option1: currency,*rates; currency*i

option2: *currency,rates; currency*i

option3: currency,rates; i*currency

option4: *rates,currency; currency+i

====================

What code will you need to place instead of the ??? placeholder for the script to print '3'?
 
a=1
b=2
def func():
        ???
func()
print(b)
You are correct!
global b
b=a+b

==================

Question 3 of 12
You have an existing class Simple() that returns the sum of two numbers using its Add(x,y) method. How can you leverage it to build another class that calculates the inverse of the sum of two numbers?
option 2 is correct
==========
class Advanced(Simple):
  def Inverse(x,y):
    sum=Simple.Add(x,y)
    return (1/sum)

class Advanced(Simple):
  def Inverse(self,x,y):
    return (1/Simple.Add(self,x,y))

class Advanced():
  def Inverse(self,x,y):
    return (1/Simple.Add(x,y))

class Advanced():
  def Inverse(x,y):
    return (1/(x+y))

================

Question 4 of 12
This code has three critical issues. Which is not actually an issue?
 
def main:
print(hello!)
This answer is incorrect.
The print statement needs to be indented using spaces or a tab.
Correct answer:
The function must be defined with the keyword 'func', not 'def'.
Hint

Correct indentation is actually critical in Python, and will be an issue in this case.

===================
Question 5 of 12
In Python, what is the correct way to develop a class called Person that has parameters in the initialize function called name, age, and sex?

option 2 is correct:
=============
class initialize:
  def __Person__(self, name, age, sex):
    self.name = name
    self.age = age
    self.sex = sex     

class Person:
  def __initialize__(self, name, age, sex):
    self.name = name
    self.age = age
    self.sex = sex   

class def Person:
  (self, name, age, sex):
    self.name = name
    self.age = age
    self.sex = sex        

class Person{
  def __initialize__(self, name, age, sex):
    self.name = name
    self.age = age
    self.sex = sex
}      

===================
Question 6 of 12
What will the following script print?
 
def inc(a,b=1):
    return(a+b)
a=inc(1)
a=inc(a,a)
print(a)
You are correct!
4

=======================

Question 7 of 12
You need to set the annual payment in one function and print the respective monthly payment in a separate function. How would you fix the suggested code to work properly?
 
def SetAnnual():
  annual=10000
def PrintMonthly():
  print("Your monthly payment is "+annual/12+" USD.")
SetAnnual()
PrintMonthly()

annual=0
def SetAnnual():
  annual=10000
def PrintMonthly():
  print("Your monthly payment is "+annual/12+" USD.")
SetAnnual()
PrintMonthly()



annual=0
def SetAnnual():
  annual=10000
def PrintMonthly():
  print("Your monthly payment is "+str(annual/12)+" USD.")
SetAnnual()
PrintMonthly()

annual=0
def SetAnnual():
  global annual=10000
def PrintMonthly():
  print("Your monthly payment is "+annual/12+" USD.")
SetAnnual()
PrintMonthly()

def SetAnnual():
  global annual
  annual=10000
def PrintMonthly():
  print("Your monthly payment is "+str(annual/12)+" USD.")
SetAnnual()
PrintMonthly()



============
correct answer;


You are correct!
def SetAnnual():
  global annual
  annual=10000
def PrintMonthly():
  print("Your monthly payment is "+str(annual/12)+" USD.")
SetAnnual()
PrintMonthly()

=====================

Question 8 of 12
Which code snippet can you use to print the number of digits in the number variable? You can assume this number is always positive and always less than 10,000.

if (number>=0):
  print(1)
elif (number>=10):
  print(2)
elif (number>=100):
  print(3)
else:
  print(4)

if (number<=10):
  print(1)
elif (number<=100):
  print(2)
elif (number<=1000):
  print(3)
else:
  print(4)

if (number>=1000):
  print(4)
elif (number>=100):
  print(3)
elif (number>=10):
  print(2)
else:
  print(1)

if (number<10000):
  print(4)
elif (number<1000):
  print(3)
elif (number<10):
  print(2)
else:
  print(1)
=============================================
Question 9 of 12
Which alternative code is logically equivalent to the code below?
 
max=x if (x>y) else y

if (x>y):
    max=y
elif (x==y):
    max=y
else:
    max=x

if (x>=y):
    max=x
elif:
    max=y

max=y
if (x>y):
    max=x

if (y>x):
    y
else:
    x

====================
Question 10 of 12
Why is the code below often added to a Python program file?
 
if __name__ == "__main__":
  main()
=============
option1 is correct
================
It executes the main() function only if this file is executed as the main program.

It assures that the program will run correctly when executed from either an IDE or command line.

It confirms that it is an actual Python program before starting the interpreter.

It allows us to skip calling the main() function by defining an environment variable.
================
Question 11 of 12
Which function will return the sum of the first item in the data list and every tenth item after?

===============
option3
========
def Sum10th(data):
  sum=0
  for i,d in enumerate(data):
    if (i % 10 != 0): sum=sum+d
  return sum

def Sum10th(data):
  sum=0
  for i,d in enumerate(data):
    if (i % 10 == 0): sum=sum+d
  return sum

def Sum10th(data):
  sum=0
  for i,d in enumerate(data):
    if (i % 10 == 0): continue
    sum=sum+d
  return sum

def Sum10th(data):
  sum=0
  for i,d in enumerate(data):
    if (i % 10 == 0): return sum
    sum=sum+d
=================

Question 12 of 12
Which real-world scenario is best described as a standard while loop?

========
option3 is correct
============
Read a book starting at a certain page, and finish at a certain page.

Read a book by skipping every second page.

Start reading a book, and stop after reading a certain number of pages.

Read a book in its entirety, from the end to the beginning.